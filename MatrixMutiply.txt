CSCI 476: Parallel Programming 
Assignment 4 
Overview
Write a SERIAL C++ program to multiply two square, integer Matrix objects of size 'N'. Use the cubic algorithm we discussed in class, but code four different versions ('ijk', 'jki', 'kij', and 'block'). The 'ijk' variants indicate the order of the loops, and the 'block' version uses the 'ijk' order and blocking. Input 'N' and the version from the user. If the version is 'block', also input a block size.

Use uniform_int_distribution and the mt19937 engine to generate int's between 0 and 4, inclusive, for the entries of 'A' and 'B'. Use a seed of ZERO for the generator. Test with other seeds, but submit the version that uses ZERO. Compute the product in matrix 'C'.

Since 'N' will vary you will need to dynamically allocate space for each matrix. You will do this with your own templated Matrix class, with support for subscripting using the syntax 'myMatrix (row, col)'.

Time the appropriate multiplication function (and ONLY this function) using this Timer class. Use values of 'N' of 1024, 1408, and 1792, for each of the four versions. Thus, you will have 12 times total for your timing results table. Obtain these times by averaging over at least 5 trials, and compiling with '-O3'.

ENSURE all versions compute the same product for the same value of 'N'. An incorrect multiply routine will result in a MAJOR deduction. Also, AVOID global variables.

Input Specification
Input the size of the matrices ('N') and the version ('ijk', 'jki', 'kij', or 'block'). If version is 'block', also input a block size. You may assume inputs are valid, AND the block size divides N.

Use PRECISELY the format below with the EXACT same SPACING and SPELLING.

Sample Input

N       ==> <UserInput>
Version ==> <UserInput>
B       ==> <UserInput> // Only if version is 'block'
Output Specification
Output the time it took to compute the product. Use milliseconds and limit the decimal places to two. Also output the sum of the first 10,000 contiguous entries of 'C' (or all of them, whichever is smaller). This will serve as a crude checksum and ensure that the multiplication doesn't get optimized away.

Use PRECISELY the format below with the EXACT same SPACING and SPELLING.

Sample Output

N       ==> 50
Version ==> ijk
    
Sum:  507066
Time: 0.13 ms
Required Functions
Include one multiplication function for each version in a driver file.

  void
  multiplyIjk (Matrix<int>& C, const Matrix<int>& A, const Matrix<int>& B);

  void
  multiplyJki (Matrix<int>& C, const Matrix<int>& A, const Matrix<int>& B);

  void
  multiplyKij (Matrix<int>& C, const Matrix<int>& A, const Matrix<int>& B);

  void
  multiplyBlock (Matrix<int>& C, const Matrix<int>& A, const Matrix<int>& B, unsigned blockSize);
Write a templated Matrix class with AT LEAST the methods below. Use exactly THREE data members: 'm_numRows', 'm_numCols', and 'm_data'. 'm_data' should be of type 'T*', while the others should be of type 'unsigned'.

  // Initialize a matrix of size 'numRows' x 'numCols'
  Matrix (unsigned numRows, unsigned numCols);

  // Copy constructor
  Matrix (const Matrix& m);

  // Destructor
  ~Matrix ();

  // Copy assignment
  // Test for self-assignment and return *this
  Matrix&
  operator= (const Matrix& m);

  // Subscript operator (non-const)
  // Do NOT do bounds checking
  T&
  operator () (unsigned row, unsigned col);

  // Subscript operator (const)
  // Do NOT do bounds checking
  const T&
  operator () (unsigned row, unsigned col) const;
What to Submit
Submit your C++ driver file and "Matrix.hpp", which will define your Matrix class (define the methods inside the header file). At the END of your driver file, in a comment, include the average run times in a NEATLY formatted table similar to the one below. Discuss the results and whether they are consistent with the analysis we performed in class. For block, use the block size that results in the best times.

  N      ijk      jki       kij      block 
  ====   ======   ======    ======   ======
  1024   xxx.xx   xxx.xx    xxx.xx   xxx.xx (B = 8)
  1408   ...
  1792   ...

  Discussion
  ==========
  ...
  
Further Exploration
Implement a PARALLEL matrix multiplication algorithm using C++ threads.

Hints
Avoid globals and making unnecessary copies.

Don't forget to compile with '-O3' to obtain timings.

Gary M. Zoppetti, Ph.D. 